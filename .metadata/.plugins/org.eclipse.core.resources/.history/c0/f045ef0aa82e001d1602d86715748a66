package com.usecase.onlineshopping.api.sos.controller;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.usecase.onlineshopping.api.sos.dto.GetOrderByCustIdResponseModel;
import com.usecase.onlineshopping.api.sos.dto.SalesOrderDTO;
import com.usecase.onlineshopping.api.sos.model.SalesOrder;
import com.usecase.onlineshopping.api.sos.service.CustomerSOSService;
import com.usecase.onlineshopping.api.sos.service.SalesOrderService;

@RestController()
@RequestMapping("/sales")
public class SalesOrderController {
	@Autowired
	private Environment env;
	
	
	@Autowired
	CustomerSOSService customerSOSService;
	
	@Autowired
	SalesOrderService salesOrderService;
	
	@Autowired
	ModelMapper modelMapper;
	
	@GetMapping("/status/check")
	public String status() {
		return "Working on port " + env.getProperty("local.server.port");
	}
	
	@PostMapping("/orders")
	public ResponseEntity<SalesOrderDTO> createOrder(@RequestBody SalesOrderDTO orderDetails) {
		
		SalesOrder order = modelMapper.map(orderDetails,SalesOrder.class);
		SalesOrder createdOrder = salesOrderService.createOrder(order);
		SalesOrderDTO responseBody = modelMapper.map(createdOrder,SalesOrderDTO.class);
		return ResponseEntity.status(HttpStatus.CREATED).body(responseBody);
	}
	
	@GetMapping("/orders")
	public ResponseEntity<GetOrderByCustIdResponseModel> getorderByCustId(@RequestParam long custId) {
		SalesOrder foundOrder = salesOrderService.findByCustId(custId);
		GetOrderByCustIdResponseModel responseBody=modelMapper.map(foundOrder,GetOrderByCustIdResponseModel.class);
		return ResponseEntity.status(HttpStatus.OK).body(responseBody);
	}
	
}
