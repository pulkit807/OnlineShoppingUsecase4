package com.usecase.onlineshopping.api.sos.service;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.usecase.onlineshopping.api.sos.model.ItemResponseModel;
import com.usecase.onlineshopping.api.sos.model.OrderLineItem;
import com.usecase.onlineshopping.api.sos.model.SalesOrder;
import com.usecase.onlineshopping.api.sos.repository.SalesOrderRepository;

@Service
public class SalesOrderService {

	@Autowired
	CustomerSOSService customerSOSService;
	
	@Autowired
	Environment env;
	
	@Autowired
	ItemsServerClient itemsServerClient;

//	static String ITEM_SERVICE_URL;
//
//    @Value("${item.service.url}")
//    public void setItemServiceUrl(String itemServiceUrl) {
//    	ITEM_SERVICE_URL = itemServiceUrl;
//    }
//
//	@Autowired
//	RestTemplate restTemplate;

	@Autowired
	private SalesOrderRepository salesOrderRepository;

	public SalesOrder createOrder(SalesOrder order) {
		if(customerSOSService.validateUser(order.getCustId())) {
			if(validate(order.getOrderLineItems())){
				SalesOrder salesOrder = salesOrderRepository.save(order);
				return salesOrder;
			}
		}
		
		return null;
	}

	private Boolean validate(List<OrderLineItem> orderLineItems) {
		return orderLineItems.stream().allMatch(item -> validateItem(item));
	}

	private Boolean validateItem(OrderLineItem item) {
		return itemsServerClient.getItemByName(item.getItemName())!=null;
	}

	public SalesOrder findByCustId(long custId) {
		System.out.println(custId);
		List<SalesOrder> result = salesOrderRepository.findByCustId(custId);
		if(result.isEmpty()) {

			return null;
		}
		return result.get(0);
		
	}

	public SalesOrder findById(long orderId) {
		System.out.println(orderId);
		Optional<SalesOrder> result = salesOrderRepository.findById(orderId);
		if(result.isEmpty()) {

			return null;
		}
		return result.get();
	}

}
